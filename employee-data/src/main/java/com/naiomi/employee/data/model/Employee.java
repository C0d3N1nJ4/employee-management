package com.naiomi.employee.data.model;

import jakarta.persistence.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Entity class representing an Employee in the database.
 * An Employee has a first name, surname, a role, and a list of associated projects.
 * This class uses JPA annotations for ORM mapping.
 */
@Entity
@Table(name = "employees", indexes = {
        @Index(name = "idx_employee_firstname", columnList = "first_name"),
        @Index(name = "idx_employee_role_id", columnList = "role_id")
})
public class Employee {

    /**
     * Unique identifier for the Employee.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * First name of the Employee.
     * Indexed for better search performance.
     */
    @Column(name = "first_name", nullable = false)
    private String firstname;

    /**
     * Surname of the Employee.
     */
    @Column(name = "surname", nullable = false)
    private String surname;

    /**
     * The Role associated with the Employee.
     * Many employees can share the same role.
     */
    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "role_id", nullable = false)
    private Role role;

    /**
     * The list of projects assigned to the Employee.
     * One Employee can have multiple projects.
     */
    @OneToMany(mappedBy = "employee", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Project> projects = new ArrayList<>();

    /**
     * Default constructor for JPA.
     */
    public Employee() {
    }

    /**
     * Parameterized constructor to create an Employee.
     *
     * @param firstName First name of the Employee.
     * @param surname   Surname of the Employee.
     * @param role      Role assigned to the Employee.
     */
    public Employee(String firstName, String surname, Role role) {
        this.firstname = firstName;
        this.surname = surname;
        this.role = role;
    }

    /**
     * Gets the ID of the Employee.
     *
     * @return ID of the Employee.
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the ID of the Employee.
     *
     * @param id ID to set.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the first name of the Employee.
     *
     * @return First name of the Employee.
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Sets the first name of the Employee.
     *
     * @param firstName First name to set.
     */
    public void setFirstname(String firstName) {
        this.firstname = firstName;
    }

    /**
     * Gets the surname of the Employee.
     *
     * @return Surname of the Employee.
     */
    public String getSurname() {
        return surname;
    }

    /**
     * Sets the surname of the Employee.
     *
     * @param surname Surname to set.
     */
    public void setSurname(String surname) {
        this.surname = surname;
    }

    /**
     * Gets the role of the Employee.
     *
     * @return Role of the Employee.
     */
    public Role getRole() {
        return role;
    }

    /**
     * Sets the role of the Employee.
     *
     * @param role Role to set.
     */
    public void setRole(Role role) {
        this.role = role;
    }

    /**
     * Checks if two Employees are equal based on their ID.
     *
     * @param o The other object to compare.
     * @return True if the IDs are equal, false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Employee)) return false;
        Employee employee = (Employee) o;
        return Objects.equals(id, employee.id);
    }

    /**
     * Generates a hash code based on the Employee's ID.
     *
     * @return Hash code.
     */
    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    /**
     * Returns a string representation of the Employee.
     *
     * @return String representation.
     */
    @Override
    public String toString() {
        return "Employee{" +
                "id=" + id +
                ", firstName='" + firstname + '\'' +
                ", surname='" + surname + '\'' +
                ", role=" + (role != null ? role.getName() : "null") +
                '}';
    }
}
